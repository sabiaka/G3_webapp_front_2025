 【Role (権限) マスタ化】
CREATE TABLE roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,            -- 一意の権限ID（自動採番）
    role_name VARCHAR(50) UNIQUE NOT NULL               -- 権限名（例: "管理者", "一般"）
);

 【Production Line (担当ライン) マスタ化】
CREATE TABLE production_lines (
    line_id INT AUTO_INCREMENT PRIMARY KEY,            -- 一意のラインID（自動採番）
    line_name VARCHAR(100) UNIQUE NOT NULL              -- ライン名（例: "ラインA", "ラインB"）
);

 【Employee ID (従業員ID) で統一管理】
CREATE TABLE employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,         -- 従業員ID（自動採番）
    employee_name VARCHAR(100) NOT NULL,                 -- 名前（フルネーム）
    employee_user_id VARCHAR(50) UNIQUE NOT NULL,        -- ユーザーID（ログイン用、一意）
    employee_password VARCHAR(255) NOT NULL,             -- パスワード（ハッシュ保存推奨）
    employee_is_active BOOLEAN DEFAULT TRUE,             -- 有効/無効フラグ（TRUE=有効）
    employee_role_id INT,                                 -- 権限ID（rolesテーブルの外部キー）
    employee_line_id INT,                                 -- 担当ラインID（production_linesテーブルの外部キー）
    employee_special_notes TEXT,                          -- 特記事項（任意のメモなど）
    employee_color_code CHAR(6),                          -- カラーコード（例: "FF0000"）
    FOREIGN KEY (employee_role_id) REFERENCES roles(role_id),
    FOREIGN KEY (employee_line_id) REFERENCES production_lines(line_id)
);

 【Reports(日報)】
CREATE TABLE reports (
    report_id INT AUTO_INCREMENT PRIMARY KEY,            -- レポートID（自動採番）
    report_employee_id INT NOT NULL,                      -- 担当者ID（employeesテーブルの外部キー）
    report_date DATE NOT NULL,                            -- 日付（対象の日報日）
    report_product_name VARCHAR(100),                     -- 製品名（任意）
    report_line_id INT NOT NULL,                          -- 担当ラインID（production_linesテーブルの外部キー）
    report_production_result INT,                         -- 生産結果（数量）
    report_today_work TEXT,                               -- 本日の作業内容
    report_memo TEXT,                                     -- メモ・備考
    FOREIGN KEY (report_employee_id) REFERENCES employees(employee_id),
    FOREIGN KEY (report_line_id) REFERENCES production_lines(line_id)
);

 【Notification Priority (優先度) マスタ化】
CREATE TABLE priorities (
    priority_id INT AUTO_INCREMENT PRIMARY KEY,           -- 優先度ID（自動採番）
    priority_label VARCHAR(20) UNIQUE NOT NULL             -- 優先度ラベル（例: "至急対応", "通常対応"）
);

 【Notifications(生産目標通知)】
CREATE TABLE notifications (
    notification_id INT AUTO_INCREMENT PRIMARY KEY,       -- 通知ID（自動採番）
    notification_data_time DATETIME DEFAULT CURRENT_TIMESTAMP,  -- 通知日時（自動設定）
    notification_line_id INT NOT NULL,                     -- 担当ラインID（外部キー）
    notification_quantity INT NOT NULL,                    -- 生産数量
    notification_item_name VARCHAR(50),                    -- 品名
    notification_item_size VARCHAR(50),                    -- サイズ
    notification_color VARCHAR(50),                         -- カラー
    notification_spring_type VARCHAR(50),                  -- バネタイプ
    notification_accessories VARCHAR(50),                  -- 同梱品
    notification_delivery_method VARCHAR(50),              -- 配送方法
    notification_delivery_address VARCHAR(100),            -- 配送先住所
    notification_delivery_company VARCHAR(50),             -- 配送会社名
    notification_remarks TEXT,                              -- 備考
    notification_priority_id INT NOT NULL,                  -- 優先度ID（外部キー）
    FOREIGN KEY (notification_line_id) REFERENCES production_lines(line_id),
    FOREIGN KEY (notification_priority_id) REFERENCES priorities(priority_id)
);

 【Machine Name (機械名) マスタ化】
CREATE TABLE machines (
    machine_id INT AUTO_INCREMENT PRIMARY KEY,             -- 機械ID（自動採番）
    machine_name VARCHAR(100) UNIQUE NOT NULL              -- 機械名（例: "生産機Mk-I"）
);

 【Machine Status(生産機械状況)】
CREATE TABLE machine_status (
    machine_status_id INT AUTO_INCREMENT PRIMARY KEY,      -- 状態ID（自動採番）
    machine_data_time DATETIME DEFAULT CURRENT_TIMESTAMP,   -- 状態記録日時
    machine_id INT NOT NULL,                                -- 機械ID（machinesテーブルの外部キー）
    machine_status ENUM('稼働中', '停止中', '異常あり', 'メンテ中') NOT NULL,  -- 状態をENUM型で限定
    machine_trouble_info TEXT,                              -- 不具合情報
    machine_last_inspection DATE,                           -- 最終点検日
    FOREIGN KEY (machine_id) REFERENCES machines(machine_id)
);


 【Inspection Images (検査画像) の分離構造(必要に応じて)】
CREATE TABLE inspection_results (
    inspection_id INT AUTO_INCREMENT PRIMARY KEY,           -- 検査ID（自動採番）
    inspection_image_path TEXT NOT NULL,                     -- 検査画像パス
    inspection_captured_time DATETIME DEFAULT CURRENT_TIMESTAMP, -- 撮影日時
    inspection_status VARCHAR(50) NOT NULL,                  -- 検査結果（良品、不良など）
    inspection_trouble_info TEXT                              -- 問題点詳細
);

 【Machine Production(ホックリング残数・生産数)】
CREATE TABLE machine_production (
    machine_prod_id INT AUTO_INCREMENT PRIMARY KEY,          -- 生産データID（自動採番）
    machine_prod_captured_time DATETIME DEFAULT CURRENT_TIMESTAMP, -- 記録日時
    machine_prod_hook_remaining INT NOT NULL,                 -- ホックリング残数
    machine_prod_count INT NOT NULL                            -- 生産数
);

 【Production Report(生産数管理)】
CREATE TABLE production_reports (
    prodreport_id INT AUTO_INCREMENT PRIMARY KEY,             -- 生産レポートID（自動採番）
    prodreport_date DATE NOT NULL,                             -- 日付
    prodreport_product_name VARCHAR(100) NOT NULL,            -- 製品名
    prodreport_plan_quantity INT NOT NULL,                     -- 計画数量
    prodreport_actual_quantity INT NOT NULL,                   -- 実績数量
    prodreport_achievement_rate DECIMAL(5,2),                  -- 達成率（例: 95.00）
    prodreport_defective_quantity INT NOT NULL,                -- 不良数
    prodreport_employee_id INT,                                -- 担当者ID（employeesテーブルの外部キー）
    prodreport_remarks TEXT,                                   -- 備考
    FOREIGN KEY (prodreport_employee_id) REFERENCES employees(employee_id)
);


/*
 * ===============================================================
 * 【racks テーブル】→【rack_slots テーブル】(棚の場所マスター) に変更！
 * これで「どの棚の、どの場所か」を管理できるようになったよ！
 * ===============================================================
 */
CREATE TABLE rack_slots (
    slot_id INT AUTO_INCREMENT PRIMARY KEY,         -- 場所のID（自動連番）
    rack_name VARCHAR(100) NOT NULL,                -- 棚自体の名前（例: "メッシュラック #1"）
    slot_name VARCHAR(50) NOT NULL,                 -- 場所の名前（例: "A-1", "A-2"）
    UNIQUE (rack_name, slot_name)                   -- 棚の名前と場所の名前の組み合わせはユニークに！
);

/*
 * ===============================================================
 * 【parts_inventory テーブル】→【part_boxes テーブル】(部品の箱マスター) に変更！
 * これで「どの箱が、どの場所にあるか」を管理できるようになったよ！
 * ===============================================================
 */
CREATE TABLE part_boxes (
    id INT AUTO_INCREMENT PRIMARY KEY,              -- 箱の内部ID（自動連番）★これがBOX IDの元ネタ！
    box_id VARCHAR(50) UNIQUE NOT NULL,             -- 箱のID（例: "BOX-101"）★QRコードに入るID！
    part_name VARCHAR(100) NOT NULL,                -- 部品名
    part_model_number VARCHAR(100),                 -- 部品型番（任意入力なのでNULLを許可！）
    quantity INT NOT NULL DEFAULT 0,                -- 部品個数
    slot_id INT,                                    -- 保管場所のID（rack_slotsテーブルの外部キー）
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (slot_id) REFERENCES rack_slots(slot_id) -- 外部キー制約
);


